#!/usr/bin/env bash -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
NOTARY_TOOL_KEYCHAIN_PROFILE="NOTARIZE_APP_CREDENTIALS"

sentinel_file="$SCRIPT_DIR/.this-is-the-repo"
if [[ -f "$sentinel_file" ]]; then
	# We're running from inside a repo
	SUPPORT_DIR="$SCRIPT_DIR/support"
	LIB_DIR="$SCRIPT_DIR/lib"
else
	# We're running inside an installed location
	bin_dir="$SCRIPT_DIR"
	prefix_dir=$(dirname "$bin_dir")
	SUPPORT_DIR="$prefix_dir/share/notarize-app/support"
	LIB_DIR="$prefix_dir/lib/notarize-app"
fi

# CONFIG
CONFIG_FILE="${HOME}/.notarize-app.conf"
DEFAULT_CONFIG="${SUPPORT_DIR}/.notarize-app.conf.defaults"

# https://stackoverflow.com/a/2464883
# Usage: config_set key value
function config_set() {
  local file=${CONFIG_FILE}
  local key=$1
  local val=${@:2}

  ensureConfigFileExists "${file}"
  chc "$file" "$key" "$val"
}

function ensureConfigFileExists() {
  if [ ! -e "$1" ] ; then
    if [ -e "$DEFAULT_CONFIG" ]; then
      cp "$DEFAULT_CONFIG" "$1";
    else
      touch "$1"
    fi
  fi
}

# thanks to ixz in #bash on irc.freenode.net
function chc() {
	sed -i "" "/${2}=/d" "${1}"
	printf "\n${2}=${3}"  >> "${1}"
}

function get_abs_filename() {
  # $1 : relative filename
  echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

# https://unix.stackexchange.com/a/331965/312709
# Usage: local myvar="$(config_get myvar)"
function config_get() {
    val="$(config_read_file ${CONFIG_FILE} "${1}")";
    if [ "${val}" = "__UNDEFINED__" ]; then
        val="$(config_read_file ${DEFAULT_CONFIG} "${1}")";
    fi
    printf -- "%s" "${val}";
}
function config_read_file() {
    (grep -E "^${2}=" -m 1 "${1}" 2>/dev/null || echo "VAR=__UNDEFINED__") | head -n 1 | cut -d '=' -f 2-;
}

function usage() {
	cat <<EOHELP
Creates, signs, and notarizes a .app into a DMG
Usage:  $(basename $0) [options] <src folder to make into dmg (containing .app & any other files)>

Options:
== Notarization Options ==
  --entitlements <file.entitlements>
      path to non-default entitlements file
  --dont-fix-permissions
		unless set, the main executable and Info.plist will have their global execution flags set. 
		Unity (and some online distribution platforms eg: itch.io) will sometimes not set this properly
  --replace-mono-lib <path_to_lib_folder>
		provide a patched mono framework for Unity 5 (replaces MonoEmbedRuntime under .app/Contents/Frameworks)
  --skip-notarize
		if you don't want to notarize, just sign and package
  --skip-wait-for-notarization
		by default this program will wait for notarization to complete with apple before proceeding. set this if you want to wait for that and staple the output yourself

== DMG Packaging ==
If none of these options are set, a DMG will not be made, and only the .app will be signed
  --make-dmg
	  add this flag to make a dmg package with default options
  --dmg-name <name (without .dmg)>
		name of the dmg package. Defaults to the same filename as the .app
  --window <x> <y>
      size of the DMG window
  --background <file_name> 
      image file to use as background of DMG window
  --icon-position <x> <y>
    position of app icon in DMG window
  --app-drop-link <x> <y>
      make a drop link to Applications, at location x,y

  -h, --help
	    display this help screen

==============

EOHELP
	exit 0
}

# defaults
DMG_SIZE_X="$(config_get DMG_SIZE_X)"
DMG_SIZE_Y="$(config_get DMG_SIZE_Y)"
DMG_ICON_X="$(config_get DMG_ICON_X)"
DMG_ICON_Y="$(config_get DMG_ICON_Y)"
DMG_APPICON_X="$(config_get DMG_APPICON_X)"
DMG_APPICON_Y="$(config_get DMG_APPICON_Y)"
APPLICATION_LINK="$(config_get DMG_APPICON_X)"

ENTITLEMENTS_FILE="${SUPPORT_DIR}/entitlements.entitlements"
DMG_BACKGROUND_IMG="${SUPPORT_DIR}/dmg_background_template.png"

# Argument parsing
while [[ "${1:0:1}" = "-" ]]; do
	case $1 in
		--entitlements)
			ENTITLEMENTS_FILE="$2"
			shift; shift;;
		--replace-mono-lib)
			REPLACE_MONO_LIB_PATH="$2"
			shift; shift;;
		--dont-fix-permissions)
			DONT_FIX_PERMISSIONS=YES
			shift;;
		--skip-notarize)
			SKIP_NOTARIZE=YES
			shift;;
		--skip-wait-for-notarization)
			SKIP_WAIT_FOR_NOTARIZATION=YES
			shift;;
		--make-dmg)
			MAKE_DMG=YES
			shift;;
		--dmg-name)
			MAKE_DMG=YES
			DMG_NAME=$2
			shift; shift;;
		--window)
			MAKE_DMG=YES
			DMG_SIZE_X=$2; DMG_SIZE_Y=$3
			config_set DMG_SIZE_X ${DMG_SIZE_X}
			config_set DMG_SIZE_Y ${DMG_SIZE_Y}
			shift; shift; shift;;
		--background)
			MAKE_DMG=YES
			DMG_BACKGROUND_IMG="$2"
			shift; shift;;
		--icon-position)
			MAKE_DMG=YES
			DMG_ICON_X=$2; DMG_ICON_Y=$3
			config_set DMG_ICON_X ${DMG_ICON_X}
			config_set DMG_ICON_Y ${DMG_ICON_Y}
			shift; shift; shift;;
		--app-drop-link)
			MAKE_DMG=YES
			APPLICATION_LINK=$2
			DMG_APPICON_X=$2; DMG_APPICON_Y=$3
			config_set DMG_APPICON_X ${DMG_APPICON_X}
			config_set DMG_APPICON_Y ${DMG_APPICON_Y}
			shift; shift; shift;;

		-h | --help)
			usage;;
		-*)
			echo "Unknown option: $1. Run 'make_osx_build --help' for help."
			exit 1;;
	esac
done

if [[ -z "$1" ]]; then
	echo "Please specify input .app or containing folder. Run 'make_osx_build --help' for help."
	exit 1
else
	SRC_FOLDER="$1"
fi

APP_BUNDLE="$(find "${SRC_FOLDER}" -type d -name '*.app' -maxdepth 1)"

if [ -z $APP_BUNDLE ]; then
	echo "No .app found in directory: "$SRC_FOLDER" Run 'make_osx_build --help' for help."
	exit 1
fi

if [ -z ${DMG_NAME+x} ]; then
	filename=$(basename -- "$APP_BUNDLE")
	DMG_NAME="${filename%.*}"
fi

PLIST_PATH=$(get_abs_filename "${APP_BUNDLE}/Contents/Info")
BUNDLE_ID=$(defaults read "${PLIST_PATH}" CFBundleIdentifier)
echo -e "üîè Prepping \033[1m\"${APP_BUNDLE}\": ${BUNDLE_ID}\033[0m"

if [[ -n "$REPLACE_MONO_LIB_PATH" ]]; then
	# replace mono framework
	echo -e "üîè Replacing Mono framework in bundle with ${REPLACE_MONO_LIB_PATH}"
	FRAMEWORKS_PATH="$APP_BUNDLE/Contents/Frameworks/MonoEmbedRuntime"
	rm -rf "$FRAMEWORKS_PATH"
	cp -R "$REPLACE_MONO_LIB_PATH" "$FRAMEWORKS_PATH"
fi

if [[ -z "${DONT_FIX_PERMISSIONS}" ]]; then
	# make sure main executable is...executable by all users
	# (Unity windows sometimes generates .apps with incorrect permissions)
	if [[ -r "$APP_BUNDLE/Contents/Info.plist" ]]; then
		# Extract the CFBundleExecutable key that contains the name of the executable and print it to standard output
		ABSOLUTE_APP_BUNDLE="$(cd "$(dirname "$APP_BUNDLE")" && pwd)/$(basename "$APP_BUNDLE")"
		EXECUTABLE_PATH="$APP_BUNDLE/Contents/MacOS/$(defaults read "$ABSOLUTE_APP_BUNDLE/Contents/Info" CFBundleExecutable)";
		echo -e "üîè Fixing executable permissions on ${EXECUTABLE_PATH}"
		chmod +x "$ABSOLUTE_APP_BUNDLE/Contents/Info.plist"
		chmod +x "$EXECUTABLE_PATH"
	fi
fi

# Remove any weird finder metadata that crept in
xattr -cr "$APP_BUNDLE"

# delete unity's meta files from the plugin bundles before signing
echo -e "üîè Deleting Unity3D .meta files and signing native plugins"

# find team id and make sure credentials are set
NUM_IDENTITIES=$(security find-identity -p basic -v | grep "Developer ID Application" -c)
if [[ NUM_IDENTITIES -eq 0 ]]; then
	echo -e "‚ùå No valid code signing identities found. Download and install your Developer ID Application certificate from Apple"
	exit 1
elif [[ NUM_IDENTITIES -eq 2 ]]; then
	echo -e "Multiple Developer ID Identities found. Which team do you want to sign with?"
	IDENTITY_OPTIONS=$(security find-identity -p basic -v | grep -o "Developer ID Application.*)")
	select id in $IDENTITY_OPTIONS; do
		case $id in
			exit) 	echo "You must choose a team"
					exit ;;
			*)		echo ${REPLY}\) $id
					SIGNING_IDENTITY=$id
					break;;
		esac
	done
else
	SIGNING_IDENTITY=$(security find-identity -p basic -v | grep -o "Developer ID Application.*)")
fi

# sign *.bundles
find "$APP_BUNDLE" -type d -name "*.bundle" -exec find {} -type f -name '*.meta' -delete \; -exec codesign --deep --force --verify --verbose --timestamp --options runtime --entitlements "$ENTITLEMENTS_FILE" --sign "$SIGNING_IDENTITY" {} \;

# sign *.dylibs
find "$APP_BUNDLE" -type f -name "*.dylib" -exec codesign --deep --force --verify --verbose --timestamp --options runtime --entitlements "$ENTITLEMENTS_FILE" --sign "$SIGNING_IDENTITY" {} \;

#sign app bundle
echo -e "üîè Signing .app"
codesign --deep --force --verify --verbose --timestamp --options runtime --entitlements "$ENTITLEMENTS_FILE" --sign "$SIGNING_IDENTITY" "$APP_BUNDLE"

if [[ -n "${MAKE_DMG}" ]]; then
	# Create the DMG
	echo -e "üîè Creating ${DMG_NAME}.dmg... (your Finder window may open and move around)"
	rm -f "${DMG_NAME}.dmg"
	APP_FILE=$(basename "$APP_BUNDLE")

	args=()
	args+=( --volname "$DMG_NAME" )
	args+=( --window-size $DMG_SIZE_X $DMG_SIZE_Y )
	args+=( --icon "$APP_FILE" $DMG_ICON_X $DMG_ICON_Y )
	args+=( --hide-extension "$APP_FILE" )

	[[ -n "$DMG_BACKGROUND_IMG" ]] && args+=( --background "$DMG_BACKGROUND_IMG" )
	[[ -n "$APPLICATION_LINK" ]] && args+=( --app-drop-link $DMG_APPICON_X $DMG_APPICON_Y )

	args+=( "${DMG_NAME}.dmg" )
	args+=( "$SRC_FOLDER" )

	if ! command -v create-dmg &> /dev/null
	then
		# try to use local version
		CREATE_DMG=${LIB_DIR}/create-dmg/create-dmg
	else
		CREATE_DMG=create-dmg
	fi

	${CREATE_DMG} "${args[@]}" 

	#sign dmg
	echo -e "üîè Signing ${DMG_NAME}.dmg"
	codesign -s "$SIGNING_IDENTITY" "${DMG_NAME}.dmg" --options runtime

	NOTARIZE_FILENAME="${DMG_NAME}.dmg"
	FILE_TO_STAPLE=${NOTARIZE_FILENAME}
else
	# create temp zip for uploading
	echo -e "Zipping .app for upload"
	temp_file="/tmp/${DMG_NAME}.zip"
	touch "${temp_file}"
	zip -qr - "${APP_BUNDLE}" >"${temp_file}"
	
	NOTARIZE_FILENAME="${temp_file}"
	FILE_TO_STAPLE=${APP_BUNDLE}
fi

if [[ -z "${SKIP_NOTARIZE}" ]]; then

	# verify credentials
	KEYCHAIN_PATH=$(security default-keychain | xargs)
	security find-generic-password -l com.apple.gke.notary.tool > /dev/null || xcrun notarytool store-credentials "$NOTARY_TOOL_KEYCHAIN_PROFILE" --keychain "$KEYCHAIN_PATH"

	#upload
	echo -e "üîè Uploading signed and compressed .app to Apple for notarization..."

	SUBMISSION_ID=$(xcrun notarytool submit "${NOTARIZE_FILENAME}"\
		--keychain-profile "${NOTARY_TOOL_KEYCHAIN_PROFILE}"\
		--keychain "${KEYCHAIN_PATH}"\
		| sed -n -e 's/^.*id: //p' | head -1)

	echo -e "...uploaded"
	printf '%s\n' --------------------

	if [[ -z "${SKIP_WAIT_FOR_NOTARIZATION}" ]]; then
		echo -e "üîè Waiting for notarization to complete..."

		STATUS=$(xcrun notarytool wait "$SUBMISSION_ID"\
			--keychain-profile "$NOTARY_TOOL_KEYCHAIN_PROFILE"\
			--keychain "$KEYCHAIN_PATH" | grep "status")
		echo $STATUS
		if [[ $STATUS =~ Accepted ]]; then
			printf "\r Notarized!"
			printf '%s\n' --------------------
			echo -e "üîè Stapling app package: ${FILE_TO_STAPLE}"
			xcrun stapler staple "${FILE_TO_STAPLE}"
		else
			echo "NOTARIZATION REJECTED. SEE LOG AT notary_log.json"

			xcrun notarytool log "$SUBMISSION_ID"\
				--keychain-profile "$NOTARY_TOOL_KEYCHAIN_PROFILE"\
				--keychain "$KEYCHAIN_PATH"\
				notary_log.json
			
			exit 1
		fi
	else
		echo -e "üîè App is now being notarized with Apple. This can take from a few minutes to a few hours."
		echo -e "üîè IMPORTANT! Once approved, make sure to staple the notorization to the app with:"
		echo -e "\033[1mxcrun stapler staple \"${FILE_TO_STAPLE}\"\033[0m"
	fi

	printf '%s\n' --------------------
	echo -e "üîè Done! ${FILE_TO_STAPLE} is ready to distribute."
fi